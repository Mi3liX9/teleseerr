/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/status": {
    /**
     * Get Overseerr status
     * @description Returns the current Overseerr status in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned status */
        200: {
          content: {
            "application/json": {
              /** @example 1.0.0 */
              version?: string;
              commitTag?: string;
              updateAvailable?: boolean;
              commitsBehind?: number;
              restartRequired?: boolean;
            };
          };
        };
      };
    };
  };
  "/status/appdata": {
    /**
     * Get application data volume status
     * @description For Docker installs, returns whether or not the volume mount was configured properly. Always returns true for non-Docker installs.
     */
    get: {
      responses: {
        /** @description Application data volume status and path */
        200: {
          content: {
            "application/json": {
              /** @example true */
              appData?: boolean;
              /** @example /app/config */
              appDataPath?: string;
            };
          };
        };
      };
    };
  };
  "/settings/main": {
    /**
     * Get main settings
     * @description Retrieves all main settings in a JSON object.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MainSettings"];
          };
        };
      };
    };
    /**
     * Update main settings
     * @description Updates main settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MainSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["MainSettings"];
          };
        };
      };
    };
  };
  "/settings/main/regenerate": {
    /**
     * Get main settings with newly-generated API key
     * @description Returns main settings in a JSON object, using the new API key.
     */
    post: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MainSettings"];
          };
        };
      };
    };
  };
  "/settings/jellyfin": {
    /**
     * Get Jellyfin settings
     * @description Retrieves current Jellyfin settings.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["JellyfinSettings"];
          };
        };
      };
    };
    /**
     * Update Jellyfin settings
     * @description Updates Jellyfin settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["JellyfinSettings"];
        };
      };
      responses: {
        /** @description Values were successfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["JellyfinSettings"];
          };
        };
      };
    };
  };
  "/settings/jellyfin/library": {
    /**
     * Get Jellyfin libraries
     * @description Returns a list of Jellyfin libraries in a JSON array.
     */
    get: {
      parameters: {
        query?: {
          /** @description Syncs the current libraries with the current Jellyfin server */
          sync?: string | null;
          /** @description Comma separated list of libraries to enable. Any libraries not passed will be disabled! */
          enable?: string | null;
        };
      };
      responses: {
        /** @description Jellyfin libraries returned */
        200: {
          content: {
            "application/json": components["schemas"]["JellyfinLibrary"][];
          };
        };
      };
    };
  };
  "/settings/jellyfin/users": {
    /**
     * Get Jellyfin Users
     * @description Returns a list of Jellyfin Users in a JSON array.
     */
    get: {
      responses: {
        /** @description Jellyfin users returned */
        200: {
          content: {
            "application/json": {
                username?: string;
                userId?: number;
              }[];
          };
        };
      };
    };
  };
  "/settings/jellyfin/sync": {
    /**
     * Get status of full Jellyfin library sync
     * @description Returns sync progress in a JSON array.
     */
    get: {
      responses: {
        /** @description Status of Jellyfin sync */
        200: {
          content: {
            "application/json": {
              /** @example false */
              running?: boolean;
              /** @example 0 */
              progress?: number;
              /** @example 100 */
              total?: number;
              currentLibrary?: components["schemas"]["JellyfinLibrary"];
              libraries?: components["schemas"]["JellyfinLibrary"][];
            };
          };
        };
      };
    };
    /**
     * Start full Jellyfin library sync
     * @description Runs a full Jellyfin library sync and returns the progress in a JSON array.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example false */
            cancel?: boolean;
            /** @example false */
            start?: boolean;
          };
        };
      };
      responses: {
        /** @description Status of Jellyfin sync */
        200: {
          content: {
            "application/json": {
              /** @example false */
              running?: boolean;
              /** @example 0 */
              progress?: number;
              /** @example 100 */
              total?: number;
              currentLibrary?: components["schemas"]["JellyfinLibrary"];
              libraries?: components["schemas"]["JellyfinLibrary"][];
            };
          };
        };
      };
    };
  };
  "/settings/plex": {
    /**
     * Get Plex settings
     * @description Retrieves current Plex settings.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlexSettings"];
          };
        };
      };
    };
    /**
     * Update Plex settings
     * @description Updates Plex settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlexSettings"];
        };
      };
      responses: {
        /** @description Values were successfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["PlexSettings"];
          };
        };
      };
    };
  };
  "/settings/plex/library": {
    /**
     * Get Plex libraries
     * @description Returns a list of Plex libraries in a JSON array.
     */
    get: {
      parameters: {
        query?: {
          /** @description Syncs the current libraries with the current Plex server */
          sync?: string | null;
          /** @description Comma separated list of libraries to enable. Any libraries not passed will be disabled! */
          enable?: string | null;
        };
      };
      responses: {
        /** @description Plex libraries returned */
        200: {
          content: {
            "application/json": components["schemas"]["PlexLibrary"][];
          };
        };
      };
    };
  };
  "/settings/plex/sync": {
    /**
     * Get status of full Plex library scan
     * @description Returns scan progress in a JSON array.
     */
    get: {
      responses: {
        /** @description Status of Plex scan */
        200: {
          content: {
            "application/json": {
              /** @example false */
              running?: boolean;
              /** @example 0 */
              progress?: number;
              /** @example 100 */
              total?: number;
              currentLibrary?: components["schemas"]["PlexLibrary"];
              libraries?: components["schemas"]["PlexLibrary"][];
            };
          };
        };
      };
    };
    /**
     * Start full Plex library scan
     * @description Runs a full Plex library scan and returns the progress in a JSON array.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example false */
            cancel?: boolean;
            /** @example false */
            start?: boolean;
          };
        };
      };
      responses: {
        /** @description Status of Plex scan */
        200: {
          content: {
            "application/json": {
              /** @example false */
              running?: boolean;
              /** @example 0 */
              progress?: number;
              /** @example 100 */
              total?: number;
              currentLibrary?: components["schemas"]["PlexLibrary"];
              libraries?: components["schemas"]["PlexLibrary"][];
            };
          };
        };
      };
    };
  };
  "/settings/plex/devices/servers": {
    /**
     * Gets the user's available Plex servers
     * @description Returns a list of available Plex servers and their connectivity state
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlexDevice"][];
          };
        };
      };
    };
  };
  "/settings/plex/users": {
    /**
     * Get Plex users
     * @description Returns a list of Plex users in a JSON array.
     *
     * Requires the `MANAGE_USERS` permission.
     */
    get: {
      responses: {
        /** @description Plex users */
        200: {
          content: {
            "application/json": {
                id?: string;
                title?: string;
                username?: string;
                email?: string;
                thumb?: string;
              }[];
          };
        };
      };
    };
  };
  "/settings/tautulli": {
    /**
     * Get Tautulli settings
     * @description Retrieves current Tautulli settings.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["TautulliSettings"];
          };
        };
      };
    };
    /**
     * Update Tautulli settings
     * @description Updates Tautulli settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TautulliSettings"];
        };
      };
      responses: {
        /** @description Values were successfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["TautulliSettings"];
          };
        };
      };
    };
  };
  "/settings/radarr": {
    /**
     * Get Radarr settings
     * @description Returns all Radarr settings in a JSON array.
     */
    get: {
      responses: {
        /** @description Values were returned */
        200: {
          content: {
            "application/json": components["schemas"]["RadarrSettings"][];
          };
        };
      };
    };
    /**
     * Create Radarr instance
     * @description Creates a new Radarr instance from the request body.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RadarrSettings"];
        };
      };
      responses: {
        /** @description New Radarr instance created */
        201: {
          content: {
            "application/json": components["schemas"]["RadarrSettings"];
          };
        };
      };
    };
  };
  "/settings/radarr/test": {
    /**
     * Test Radarr configuration
     * @description Tests if the Radarr configuration is valid. Returns profiles and root folders on success.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example 127.0.0.1 */
            hostname: string;
            /** @example 7878 */
            port: number;
            /** @example yourapikey */
            apiKey: string;
            /** @example false */
            useSsl: boolean;
            baseUrl?: string;
          };
        };
      };
      responses: {
        /** @description Succesfully connected to Radarr instance */
        200: {
          content: {
            "application/json": {
              profiles?: components["schemas"]["ServiceProfile"][];
            };
          };
        };
      };
    };
  };
  "/settings/radarr/{radarrId}": {
    /**
     * Update Radarr instance
     * @description Updates an existing Radarr instance with the provided values.
     */
    put: {
      parameters: {
        path: {
          /** @description Radarr instance ID */
          radarrId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RadarrSettings"];
        };
      };
      responses: {
        /** @description Radarr instance updated */
        200: {
          content: {
            "application/json": components["schemas"]["RadarrSettings"];
          };
        };
      };
    };
    /**
     * Delete Radarr instance
     * @description Deletes an existing Radarr instance based on the radarrId parameter.
     */
    delete: {
      parameters: {
        path: {
          /** @description Radarr instance ID */
          radarrId: number;
        };
      };
      responses: {
        /** @description Radarr instance updated */
        200: {
          content: {
            "application/json": components["schemas"]["RadarrSettings"];
          };
        };
      };
    };
  };
  "/settings/radarr/{radarrId}/profiles": {
    /**
     * Get available Radarr profiles
     * @description Returns a list of profiles available on the Radarr server instance in a JSON array.
     */
    get: {
      parameters: {
        path: {
          /** @description Radarr instance ID */
          radarrId: number;
        };
      };
      responses: {
        /** @description Returned list of profiles */
        200: {
          content: {
            "application/json": components["schemas"]["ServiceProfile"][];
          };
        };
      };
    };
  };
  "/settings/sonarr": {
    /**
     * Get Sonarr settings
     * @description Returns all Sonarr settings in a JSON array.
     */
    get: {
      responses: {
        /** @description Values were returned */
        200: {
          content: {
            "application/json": components["schemas"]["SonarrSettings"][];
          };
        };
      };
    };
    /**
     * Create Sonarr instance
     * @description Creates a new Sonarr instance from the request body.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SonarrSettings"];
        };
      };
      responses: {
        /** @description New Sonarr instance created */
        201: {
          content: {
            "application/json": components["schemas"]["SonarrSettings"];
          };
        };
      };
    };
  };
  "/settings/sonarr/test": {
    /**
     * Test Sonarr configuration
     * @description Tests if the Sonarr configuration is valid. Returns profiles and root folders on success.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example 127.0.0.1 */
            hostname: string;
            /** @example 8989 */
            port: number;
            /** @example yourapikey */
            apiKey: string;
            /** @example false */
            useSsl: boolean;
            baseUrl?: string;
          };
        };
      };
      responses: {
        /** @description Succesfully connected to Sonarr instance */
        200: {
          content: {
            "application/json": {
              profiles?: components["schemas"]["ServiceProfile"][];
            };
          };
        };
      };
    };
  };
  "/settings/sonarr/{sonarrId}": {
    /**
     * Update Sonarr instance
     * @description Updates an existing Sonarr instance with the provided values.
     */
    put: {
      parameters: {
        path: {
          /** @description Sonarr instance ID */
          sonarrId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SonarrSettings"];
        };
      };
      responses: {
        /** @description Sonarr instance updated */
        200: {
          content: {
            "application/json": components["schemas"]["SonarrSettings"];
          };
        };
      };
    };
    /**
     * Delete Sonarr instance
     * @description Deletes an existing Sonarr instance based on the sonarrId parameter.
     */
    delete: {
      parameters: {
        path: {
          /** @description Sonarr instance ID */
          sonarrId: number;
        };
      };
      responses: {
        /** @description Sonarr instance updated */
        200: {
          content: {
            "application/json": components["schemas"]["SonarrSettings"];
          };
        };
      };
    };
  };
  "/settings/public": {
    /**
     * Get public settings
     * @description Returns settings that are not protected or sensitive. Mainly used to determine if the application has been configured for the first time.
     */
    get: {
      responses: {
        /** @description Public settings returned */
        200: {
          content: {
            "application/json": components["schemas"]["PublicSettings"];
          };
        };
      };
    };
  };
  "/settings/initialize": {
    /**
     * Initialize application
     * @description Sets the app as initialized, allowing the user to navigate to pages other than the setup page.
     */
    post: {
      responses: {
        /** @description Public settings returned */
        200: {
          content: {
            "application/json": components["schemas"]["PublicSettings"];
          };
        };
      };
    };
  };
  "/settings/jobs": {
    /**
     * Get scheduled jobs
     * @description Returns list of all scheduled jobs and details about their next execution time in a JSON array.
     */
    get: {
      responses: {
        /** @description Scheduled jobs returned */
        200: {
          content: {
            "application/json": components["schemas"]["Job"][];
          };
        };
      };
    };
  };
  "/settings/jobs/{jobId}/run": {
    /**
     * Invoke a specific job
     * @description Invokes a specific job to run. Will return the new job status in JSON format.
     */
    post: {
      parameters: {
        path: {
          jobId: string;
        };
      };
      responses: {
        /** @description Invoked job returned */
        200: {
          content: {
            "application/json": components["schemas"]["Job"];
          };
        };
      };
    };
  };
  "/settings/jobs/{jobId}/cancel": {
    /**
     * Cancel a specific job
     * @description Cancels a specific job. Will return the new job status in JSON format.
     */
    post: {
      parameters: {
        path: {
          jobId: string;
        };
      };
      responses: {
        /** @description Canceled job returned */
        200: {
          content: {
            "application/json": components["schemas"]["Job"];
          };
        };
      };
    };
  };
  "/settings/jobs/{jobId}/schedule": {
    /**
     * Modify job schedule
     * @description Re-registers the job with the schedule specified. Will return the job in JSON format.
     */
    post: {
      parameters: {
        path: {
          jobId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @example 0 *\/5 * * * * */
            schedule?: string;
          };
        };
      };
      responses: {
        /** @description Rescheduled job */
        200: {
          content: {
            "application/json": components["schemas"]["Job"];
          };
        };
      };
    };
  };
  "/settings/cache": {
    /**
     * Get a list of active caches
     * @description Retrieves a list of all active caches and their current stats.
     */
    get: {
      responses: {
        /** @description Caches returned */
        200: {
          content: {
            "application/json": {
              imageCache?: {
                tmdb?: {
                  /** @example 123456 */
                  size?: number;
                  /** @example 123 */
                  imageCount?: number;
                };
              };
              apiCaches?: {
                  /** @example cache-id */
                  id?: string;
                  /** @example cache name */
                  name?: string;
                  stats?: {
                    hits?: number;
                    misses?: number;
                    keys?: number;
                    ksize?: number;
                    vsize?: number;
                  };
                }[];
            };
          };
        };
      };
    };
  };
  "/settings/cache/{cacheId}/flush": {
    /**
     * Flush a specific cache
     * @description Flushes all data from the cache ID provided
     */
    post: {
      parameters: {
        path: {
          cacheId: string;
        };
      };
      responses: {
        /** @description Flushed cache */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/logs": {
    /**
     * Returns logs
     * @description Returns list of all log items and details
     */
    get: {
      parameters: {
        query?: {
          take?: number | null;
          skip?: number | null;
          filter?: "debug" | "info" | "warn" | "error" | null;
          search?: string | null;
        };
      };
      responses: {
        /** @description Server log returned */
        200: {
          content: {
            "application/json": {
                /** @example server */
                label?: string;
                /** @example info */
                level?: string;
                /** @example Server ready on port 5055 */
                message?: string;
                /** @example 2020-12-15T16:20:00.069Z */
                timestamp?: string;
              }[];
          };
        };
      };
    };
  };
  "/settings/notifications/email": {
    /**
     * Get email notification settings
     * @description Returns current email notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned email settings */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationEmailSettings"];
          };
        };
      };
    };
    /**
     * Update email notification settings
     * @description Updates email notification settings with provided values
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NotificationEmailSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationEmailSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/email/test": {
    /**
     * Test email settings
     * @description Sends a test notification to the email agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NotificationEmailSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/discord": {
    /**
     * Get Discord notification settings
     * @description Returns current Discord notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned Discord settings */
        200: {
          content: {
            "application/json": components["schemas"]["DiscordSettings"];
          };
        };
      };
    };
    /**
     * Update Discord notification settings
     * @description Updates Discord notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["DiscordSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["DiscordSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/discord/test": {
    /**
     * Test Discord settings
     * @description Sends a test notification to the Discord agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["DiscordSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/lunasea": {
    /**
     * Get LunaSea notification settings
     * @description Returns current LunaSea notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned LunaSea settings */
        200: {
          content: {
            "application/json": components["schemas"]["LunaSeaSettings"];
          };
        };
      };
    };
    /**
     * Update LunaSea notification settings
     * @description Updates LunaSea notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LunaSeaSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["LunaSeaSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/lunasea/test": {
    /**
     * Test LunaSea settings
     * @description Sends a test notification to the LunaSea agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LunaSeaSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/pushbullet": {
    /**
     * Get Pushbullet notification settings
     * @description Returns current Pushbullet notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned Pushbullet settings */
        200: {
          content: {
            "application/json": components["schemas"]["PushbulletSettings"];
          };
        };
      };
    };
    /**
     * Update Pushbullet notification settings
     * @description Update Pushbullet notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PushbulletSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["PushbulletSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/pushbullet/test": {
    /**
     * Test Pushbullet settings
     * @description Sends a test notification to the Pushbullet agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PushbulletSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/pushover": {
    /**
     * Get Pushover notification settings
     * @description Returns current Pushover notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned Pushover settings */
        200: {
          content: {
            "application/json": components["schemas"]["PushoverSettings"];
          };
        };
      };
    };
    /**
     * Update Pushover notification settings
     * @description Update Pushover notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PushoverSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["PushoverSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/pushover/test": {
    /**
     * Test Pushover settings
     * @description Sends a test notification to the Pushover agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PushoverSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/pushover/sounds": {
    /**
     * Get Pushover sounds
     * @description Returns valid Pushover sound options in a JSON array.
     */
    get: {
      parameters: {
        query: {
          token: string;
        };
      };
      responses: {
        /** @description Returned Pushover settings */
        200: {
          content: {
            "application/json": {
                name?: string;
                description?: string;
              }[];
          };
        };
      };
    };
  };
  "/settings/notifications/gotify": {
    /**
     * Get Gotify notification settings
     * @description Returns current Gotify notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned Gotify settings */
        200: {
          content: {
            "application/json": components["schemas"]["GotifySettings"];
          };
        };
      };
    };
    /**
     * Update Gotify notification settings
     * @description Update Gotify notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["GotifySettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["GotifySettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/gotify/test": {
    /**
     * Test Gotify settings
     * @description Sends a test notification to the Gotify agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["GotifySettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/slack": {
    /**
     * Get Slack notification settings
     * @description Returns current Slack notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned slack settings */
        200: {
          content: {
            "application/json": components["schemas"]["SlackSettings"];
          };
        };
      };
    };
    /**
     * Update Slack notification settings
     * @description Updates Slack notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SlackSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["SlackSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/slack/test": {
    /**
     * Test Slack settings
     * @description Sends a test notification to the Slack agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SlackSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/telegram": {
    /**
     * Get Telegram notification settings
     * @description Returns current Telegram notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned Telegram settings */
        200: {
          content: {
            "application/json": components["schemas"]["TelegramSettings"];
          };
        };
      };
    };
    /**
     * Update Telegram notification settings
     * @description Update Telegram notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TelegramSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["TelegramSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/telegram/test": {
    /**
     * Test Telegram settings
     * @description Sends a test notification to the Telegram agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TelegramSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/webpush": {
    /**
     * Get Web Push notification settings
     * @description Returns current Web Push notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned web push settings */
        200: {
          content: {
            "application/json": components["schemas"]["WebPushSettings"];
          };
        };
      };
    };
    /**
     * Update Web Push notification settings
     * @description Updates Web Push notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["WebPushSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["WebPushSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/webpush/test": {
    /**
     * Test Web Push settings
     * @description Sends a test notification to the Web Push agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["WebPushSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/notifications/webhook": {
    /**
     * Get webhook notification settings
     * @description Returns current webhook notification settings in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned webhook settings */
        200: {
          content: {
            "application/json": components["schemas"]["WebhookSettings"];
          };
        };
      };
    };
    /**
     * Update webhook notification settings
     * @description Updates webhook notification settings with the provided values.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["WebhookSettings"];
        };
      };
      responses: {
        /** @description Values were sucessfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["WebhookSettings"];
          };
        };
      };
    };
  };
  "/settings/notifications/webhook/test": {
    /**
     * Test webhook settings
     * @description Sends a test notification to the webhook agent.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["WebhookSettings"];
        };
      };
      responses: {
        /** @description Test notification attempted */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/discover": {
    /**
     * Get all discover sliders
     * @description Returns all discovery sliders. Built-in and custom made.
     */
    get: {
      responses: {
        /** @description Returned all discovery sliders */
        200: {
          content: {
            "application/json": components["schemas"]["DiscoverSlider"][];
          };
        };
      };
    };
    /**
     * Batch update all sliders.
     * @description Batch update all sliders at once. Should also be used for creation. Will only update sliders provided
     * and will not delete any sliders not present in the request. If a slider is missing a required field,
     * it will be ignored. Requires the `ADMIN` permission.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["DiscoverSlider"][];
        };
      };
      responses: {
        /** @description Returned all newly updated discovery sliders */
        200: {
          content: {
            "application/json": components["schemas"]["DiscoverSlider"][];
          };
        };
      };
    };
  };
  "/settings/discover/{sliderId}": {
    /**
     * Update a single slider
     * @description Updates a single slider and return the newly updated slider. Requires the `ADMIN` permission.
     */
    put: {
      parameters: {
        path: {
          sliderId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @example Slider Title */
            title?: string;
            /** @example 1 */
            type?: number;
            /** @example 1 */
            data?: string;
          };
        };
      };
      responses: {
        /** @description Returns newly added discovery slider */
        200: {
          content: {
            "application/json": components["schemas"]["DiscoverSlider"];
          };
        };
      };
    };
    /**
     * Delete slider by ID
     * @description Deletes the slider with the provided sliderId. Requires the `ADMIN` permission.
     */
    delete: {
      parameters: {
        path: {
          sliderId: number;
        };
      };
      responses: {
        /** @description Slider successfully deleted */
        200: {
          content: {
            "application/json": components["schemas"]["DiscoverSlider"];
          };
        };
      };
    };
  };
  "/settings/discover/add": {
    /**
     * Add a new slider
     * @description Add a single slider and return the newly created slider. Requires the `ADMIN` permission.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example New Slider */
            title?: string;
            /** @example 1 */
            type?: number;
            /** @example 1 */
            data?: string;
          };
        };
      };
      responses: {
        /** @description Returns newly added discovery slider */
        200: {
          content: {
            "application/json": components["schemas"]["DiscoverSlider"];
          };
        };
      };
    };
  };
  "/settings/discover/reset": {
    /**
     * Reset all discover sliders
     * @description Resets all discovery sliders to the default values. Requires the `ADMIN` permission.
     */
    get: {
      responses: {
        /** @description All sliders reset to defaults */
        204: {
          content: never;
        };
      };
    };
  };
  "/settings/about": {
    /**
     * Get server stats
     * @description Returns current server stats in a JSON object.
     */
    get: {
      responses: {
        /** @description Returned about settings */
        200: {
          content: {
            "application/json": {
              /** @example 1.0.0 */
              version?: string;
              /** @example 100 */
              totalRequests?: number;
              /** @example 100 */
              totalMediaItems?: number;
              /** @example Asia/Tokyo */
              tz?: string | null;
              /** @example /app/config */
              appDataPath?: string;
            };
          };
        };
      };
    };
  };
  "/auth/me": {
    /**
     * Get logged-in user
     * @description Returns the currently logged-in user.
     */
    get: {
      responses: {
        /** @description Object containing the logged-in user in JSON */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/auth/plex": {
    /**
     * Sign in using a Plex token
     * @description Takes an `authToken` (Plex token) to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the main Plex server, they will also have an account created, but without any permissions.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            authToken: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/auth/jellyfin": {
    /**
     * Sign in using a Jellyfin username and password
     * @description Takes the user's username and password to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the Jellyfin server, they will also have an account created, but without any permissions.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            username: string;
            password: string;
            hostname?: string;
            email?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/auth/local": {
    /**
     * Sign in using a local account
     * @description Takes an `email` and a `password` to log the user in. Generates a session cookie for use in further requests.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/auth/logout": {
    /**
     * Sign out and clear session cookie
     * @description Completely clear the session cookie and associated values, effectively signing the user out.
     */
    post: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example ok */
              status?: string;
            };
          };
        };
      };
    };
  };
  "/auth/reset-password": {
    /**
     * Send a reset password email
     * @description Sends a reset password email to the email if the user exists
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example ok */
              status?: string;
            };
          };
        };
      };
    };
  };
  "/auth/reset-password/{guid}": {
    /**
     * Reset the password for a user
     * @description Resets the password for a user if the given guid is connected to a user
     */
    post: {
      parameters: {
        path: {
          guid: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            password: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example ok */
              status?: string;
            };
          };
        };
      };
    };
  };
  "/user": {
    /**
     * Get all users
     * @description Returns all users in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          take?: number | null;
          skip?: number | null;
          sort?: "created" | "updated" | "requests" | "displayname";
        };
      };
      responses: {
        /** @description A JSON array of all users */
        200: {
          content: {
            "application/json": {
              pageInfo?: components["schemas"]["PageInfo"];
              results?: components["schemas"]["User"][];
            };
          };
        };
      };
    };
    /**
     * Update batch of users
     * @description Update users with given IDs with provided values in request `body.settings`. You cannot update users' Plex tokens through this request.
     *
     * Requires the `MANAGE_USERS` permission.
     */
    put: {
      requestBody: {
        content: {
          "application/json": {
            ids?: number[];
            permissions?: number;
          };
        };
      };
      responses: {
        /** @description Successfully updated user details */
        200: {
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
      };
    };
    /**
     * Create new user
     * @description Creates a new user. Requires the `MANAGE_USERS` permission.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @example hey@itsme.com */
            email?: string;
            username?: string;
            permissions?: number;
          };
        };
      };
      responses: {
        /** @description The created user */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/user/import-from-plex": {
    /**
     * Import all users from Plex
     * @description Fetches and imports users from the Plex server. If a list of Plex IDs is provided in the request body, only the specified users will be imported. Otherwise, all users will be imported.
     *
     * Requires the `MANAGE_USERS` permission.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            plexIds?: string[];
          };
        };
      };
      responses: {
        /** @description A list of the newly created users */
        201: {
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
      };
    };
  };
  "/user/import-from-jellyfin": {
    /**
     * Import all users from Jellyfin
     * @description Fetches and imports users from the Jellyfin server.
     *
     * Requires the `MANAGE_USERS` permission.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            jellyfinIds?: string[];
          };
        };
      };
      responses: {
        /** @description A list of the newly created users */
        201: {
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
      };
    };
  };
  "/user/registerPushSubscription": {
    /**
     * Register a web push /user/registerPushSubscription
     * @description Registers a web push subscription for the logged-in user
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            endpoint: string;
            auth: string;
            p256dh: string;
          };
        };
      };
      responses: {
        /** @description Successfully registered push subscription */
        204: {
          content: never;
        };
      };
    };
  };
  "/user/{userId}": {
    /**
     * Get user by ID
     * @description Retrieves user details in a JSON object. Requires the `MANAGE_USERS` permission.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description Users details in JSON */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /**
     * Update a user by user ID
     * @description Update a user with the provided values. You cannot update a user's Plex token through this request.
     *
     * Requires the `MANAGE_USERS` permission.
     */
    put: {
      parameters: {
        path: {
          userId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      responses: {
        /** @description Successfully updated user details */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /**
     * Delete user by ID
     * @description Deletes the user with the provided userId. Requires the `MANAGE_USERS` permission.
     */
    delete: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User successfully deleted */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/user/{userId}/requests": {
    /**
     * Get requests for a specific user
     * @description Retrieves a user's requests in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          take?: number | null;
          skip?: number | null;
        };
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User's requests returned */
        200: {
          content: {
            "application/json": {
              pageInfo?: components["schemas"]["PageInfo"];
              results?: components["schemas"]["MediaRequest"][];
            };
          };
        };
      };
    };
  };
  "/user/{userId}/quota": {
    /**
     * Get quotas for a specific user
     * @description Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User quota details in JSON */
        200: {
          content: {
            "application/json": {
              movie?: {
                /** @example 7 */
                days?: number;
                /** @example 10 */
                limit?: number;
                /** @example 6 */
                used?: number;
                /** @example 4 */
                remaining?: number;
                /** @example false */
                restricted?: boolean;
              };
              tv?: {
                /** @example 7 */
                days?: number;
                /** @example 10 */
                limit?: number;
                /** @example 6 */
                used?: number;
                /** @example 4 */
                remaining?: number;
                /** @example false */
                restricted?: boolean;
              };
            };
          };
        };
      };
    };
  };
  "/watchlist": {
    /** Add media to watchlist */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Watchlist"];
        };
      };
      responses: {
        /** @description Watchlist data returned */
        200: {
          content: {
            "application/json": components["schemas"]["Watchlist"];
          };
        };
      };
    };
  };
  "/watchlist/{tmdbId}": {
    /**
     * Delete watchlist item
     * @description Removes a watchlist item.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description tmdbId ID
           * @example 1
           */
          tmdbId: string;
        };
      };
      responses: {
        /** @description Succesfully removed watchlist item */
        204: {
          content: never;
        };
      };
    };
  };
  "/user/{userId}/watchlist": {
    /**
     * Get the Plex watchlist for a specific user
     * @description Retrieves a user's Plex Watchlist in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description Watchlist data returned */
        200: {
          content: {
            "application/json": {
              page?: number;
              totalPages?: number;
              totalResults?: number;
              results?: {
                  /** @example 1 */
                  tmdbId?: number;
                  ratingKey?: string;
                  type?: string;
                  title?: string;
                }[];
            };
          };
        };
      };
    };
  };
  "/user/{userId}/settings/main": {
    /**
     * Get general settings for a user
     * @description Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User general settings returned */
        200: {
          content: {
            "application/json": {
              /** @example Mr User */
              username?: string;
            };
          };
        };
      };
    };
    /**
     * Update general settings for a user
     * @description Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
     */
    post: {
      parameters: {
        path: {
          userId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            username?: string | null;
          };
        };
      };
      responses: {
        /** @description Updated user general settings returned */
        200: {
          content: {
            "application/json": {
              /** @example Mr User */
              username?: string;
            };
          };
        };
      };
    };
  };
  "/user/{userId}/settings/password": {
    /**
     * Get password page informatiom
     * @description Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User password page information returned */
        200: {
          content: {
            "application/json": {
              /** @example true */
              hasPassword?: boolean;
            };
          };
        };
      };
    };
    /**
     * Update password for a user
     * @description Updates a user's password. Requires `MANAGE_USERS` permission if editing other users.
     */
    post: {
      parameters: {
        path: {
          userId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            currentPassword?: string | null;
            newPassword: string;
          };
        };
      };
      responses: {
        /** @description User password updated */
        204: {
          content: never;
        };
      };
    };
  };
  "/user/{userId}/settings/notifications": {
    /**
     * Get notification settings for a user
     * @description Returns notification settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User notification settings returned */
        200: {
          content: {
            "application/json": components["schemas"]["UserSettingsNotifications"];
          };
        };
      };
    };
    /**
     * Update notification settings for a user
     * @description Updates and returns notification settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
     */
    post: {
      parameters: {
        path: {
          userId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserSettingsNotifications"];
        };
      };
      responses: {
        /** @description Updated user notification settings returned */
        200: {
          content: {
            "application/json": components["schemas"]["UserSettingsNotifications"];
          };
        };
      };
    };
  };
  "/user/{userId}/settings/permissions": {
    /**
     * Get permission settings for a user
     * @description Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description User permission settings returned */
        200: {
          content: {
            "application/json": {
              /** @example 2 */
              permissions?: number;
            };
          };
        };
      };
    };
    /**
     * Update permission settings for a user
     * @description Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
     */
    post: {
      parameters: {
        path: {
          userId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            permissions: number;
          };
        };
      };
      responses: {
        /** @description Updated user general settings returned */
        200: {
          content: {
            "application/json": {
              /** @example 2 */
              permissions?: number;
            };
          };
        };
      };
    };
  };
  "/user/{userId}/watch_data": {
    /**
     * Get watch data
     * @description Returns play count, play duration, and recently watched media.
     *
     * Requires the `ADMIN` permission to fetch results for other users.
     */
    get: {
      parameters: {
        path: {
          userId: number;
        };
      };
      responses: {
        /** @description Users */
        200: {
          content: {
            "application/json": {
              recentlyWatched?: components["schemas"]["MediaInfo"][];
              playCount?: number;
            };
          };
        };
      };
    };
  };
  "/search": {
    /**
     * Search for movies, TV shows, or people
     * @description Returns a list of movies, TV shows, or people a JSON object.
     */
    get: {
      parameters: {
        query: {
          query: string;
          page?: number;
          language?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: (components["schemas"]["MovieResult"] | components["schemas"]["TvResult"] | components["schemas"]["PersonResult"])[];
            };
          };
        };
      };
    };
  };
  "/search/keyword": {
    /**
     * Search for keywords
     * @description Returns a list of TMDB keywords matching the search query
     */
    get: {
      parameters: {
        query: {
          query: string;
          page?: number;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["Keyword"][];
            };
          };
        };
      };
    };
  };
  "/search/company": {
    /**
     * Search for companies
     * @description Returns a list of TMDB companies matching the search query. (Will not return origin country)
     */
    get: {
      parameters: {
        query: {
          query: string;
          page?: number;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["Company"][];
            };
          };
        };
      };
    };
  };
  "/discover/movies": {
    /**
     * Discover movies
     * @description Returns a list of movies in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
          genre?: string;
          studio?: number;
          keywords?: string;
          sortBy?: string;
          primaryReleaseDateGte?: string;
          primaryReleaseDateLte?: string;
          withRuntimeGte?: number;
          withRuntimeLte?: number;
          voteAverageGte?: number;
          voteAverageLte?: number;
          voteCountGte?: number;
          voteCountLte?: number;
          watchRegion?: string;
          watchProviders?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/movies/genre/{genreId}": {
    /**
     * Discover movies by genre
     * @description Returns a list of movies based on the provided genre ID in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          genreId: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              genre?: components["schemas"]["Genre"];
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/movies/language/{language}": {
    /**
     * Discover movies by original language
     * @description Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          language: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              language?: components["schemas"]["SpokenLanguage"];
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/movies/studio/{studioId}": {
    /**
     * Discover movies by studio
     * @description Returns a list of movies based on the provided studio ID in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          studioId: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              studio?: components["schemas"]["ProductionCompany"];
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/movies/upcoming": {
    /**
     * Upcoming movies
     * @description Returns a list of movies in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/tv": {
    /**
     * Discover TV shows
     * @description Returns a list of TV shows in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
          genre?: string;
          network?: number;
          keywords?: string;
          sortBy?: string;
          firstAirDateGte?: string;
          firstAirDateLte?: string;
          withRuntimeGte?: number;
          withRuntimeLte?: number;
          voteAverageGte?: number;
          voteAverageLte?: number;
          voteCountGte?: number;
          voteCountLte?: number;
          watchRegion?: string;
          watchProviders?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/tv/language/{language}": {
    /**
     * Discover TV shows by original language
     * @description Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          language: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              language?: components["schemas"]["SpokenLanguage"];
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/tv/genre/{genreId}": {
    /**
     * Discover TV shows by genre
     * @description Returns a list of TV shows based on the provided genre ID in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          genreId: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              genre?: components["schemas"]["Genre"];
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/tv/network/{networkId}": {
    /**
     * Discover TV shows by network
     * @description Returns a list of TV shows based on the provided network ID in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          networkId: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              network?: components["schemas"]["Network"];
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/tv/upcoming": {
    /**
     * Discover Upcoming TV shows
     * @description Returns a list of upcoming TV shows in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/trending": {
    /**
     * Trending movies and TV
     * @description Returns a list of movies and TV shows in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: (components["schemas"]["MovieResult"] | components["schemas"]["TvResult"] | components["schemas"]["PersonResult"])[];
            };
          };
        };
      };
    };
  };
  "/discover/keyword/{keywordId}/movies": {
    /**
     * Get movies from keyword
     * @description Returns list of movies based on the provided keyword ID a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          keywordId: number;
        };
      };
      responses: {
        /** @description List of movies */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/discover/genreslider/movie": {
    /**
     * Get genre slider data for movies
     * @description Returns a list of genres with backdrops attached
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
      };
      responses: {
        /** @description Genre slider data returned */
        200: {
          content: {
            "application/json": {
                /** @example 1 */
                id?: number;
                backdrops?: string[];
                /** @example Genre Name */
                name?: string;
              }[];
          };
        };
      };
    };
  };
  "/discover/genreslider/tv": {
    /**
     * Get genre slider data for TV series
     * @description Returns a list of genres with backdrops attached
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
      };
      responses: {
        /** @description Genre slider data returned */
        200: {
          content: {
            "application/json": {
                /** @example 1 */
                id?: number;
                backdrops?: string[];
                /** @example Genre Name */
                name?: string;
              }[];
          };
        };
      };
    };
  };
  "/discover/watchlist": {
    /** Get the Plex watchlist. */
    get: {
      parameters: {
        query?: {
          page?: number;
        };
      };
      responses: {
        /** @description Watchlist data returned */
        200: {
          content: {
            "application/json": {
              page?: number;
              totalPages?: number;
              totalResults?: number;
              results?: {
                  /** @example 1 */
                  tmdbId?: number;
                  ratingKey?: string;
                  type?: string;
                  title?: string;
                }[];
            };
          };
        };
      };
    };
  };
  "/request": {
    /**
     * Get all requests
     * @description Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS` permissions. Otherwise, only the logged-in user's requests are returned.
     *
     * If the `requestedBy` parameter is specified, only requests from that particular user ID will be returned.
     */
    get: {
      parameters: {
        query?: {
          take?: number | null;
          skip?: number | null;
          filter?: "all" | "approved" | "available" | "pending" | "processing" | "unavailable" | "failed" | null;
          sort?: "added" | "modified";
          requestedBy?: number | null;
        };
      };
      responses: {
        /** @description Requests returned */
        200: {
          content: {
            "application/json": {
              pageInfo?: components["schemas"]["PageInfo"];
              results?: components["schemas"]["MediaRequest"][];
            };
          };
        };
      };
    };
    /**
     * Create new request
     * @description Creates a new request with the provided media ID and type. The `REQUEST` permission is required.
     *
     * If the user has the `ADMIN` or `AUTO_APPROVE` permissions, their request will be auomatically approved.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /**
             * @example movie
             * @enum {string}
             */
            mediaType: "movie" | "tv";
            /** @example 123 */
            mediaId: number;
            /** @example 123 */
            tvdbId?: number;
            seasons?: number[] | "all";
            /** @example false */
            is4k?: boolean;
            serverId?: number;
            profileId?: number;
            rootFolder?: string;
            languageProfileId?: number;
            userId?: number | null;
          };
        };
      };
      responses: {
        /** @description Succesfully created the request */
        201: {
          content: {
            "application/json": components["schemas"]["MediaRequest"];
          };
        };
      };
    };
  };
  "/request/count": {
    /**
     * Gets request counts
     * @description Returns the number of pending and approved requests.
     */
    get: {
      responses: {
        /** @description Request counts returned */
        200: {
          content: {
            "application/json": {
              total?: number;
              movie?: number;
              tv?: number;
              pending?: number;
              approved?: number;
              declined?: number;
              processing?: number;
              available?: number;
            };
          };
        };
      };
    };
  };
  "/request/{requestId}": {
    /**
     * Get MediaRequest
     * @description Returns a specific MediaRequest in a JSON object.
     */
    get: {
      parameters: {
        path: {
          /**
           * @description Request ID
           * @example 1
           */
          requestId: string;
        };
      };
      responses: {
        /** @description Succesfully returns request */
        200: {
          content: {
            "application/json": components["schemas"]["MediaRequest"];
          };
        };
      };
    };
    /**
     * Update MediaRequest
     * @description Updates a specific media request and returns the request in a JSON object. Requires the `MANAGE_REQUESTS` permission.
     */
    put: {
      parameters: {
        path: {
          /**
           * @description Request ID
           * @example 1
           */
          requestId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @enum {string} */
            mediaType: "movie" | "tv";
            seasons?: number[];
            /** @example false */
            is4k?: boolean;
            serverId?: number;
            profileId?: number;
            rootFolder?: string;
            languageProfileId?: number;
            userId?: number | null;
          };
        };
      };
      responses: {
        /** @description Succesfully updated request */
        200: {
          content: {
            "application/json": components["schemas"]["MediaRequest"];
          };
        };
      };
    };
    /**
     * Delete request
     * @description Removes a request. If the user has the `MANAGE_REQUESTS` permission, any request can be removed. Otherwise, only pending requests can be removed.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description Request ID
           * @example 1
           */
          requestId: string;
        };
      };
      responses: {
        /** @description Succesfully removed request */
        204: {
          content: never;
        };
      };
    };
  };
  "/request/{requestId}/retry": {
    /**
     * Retry failed request
     * @description Retries a request by resending requests to Sonarr or Radarr.
     *
     * Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
     */
    post: {
      parameters: {
        path: {
          /** @description Request ID */
          requestId: string;
        };
      };
      responses: {
        /** @description Retry triggered */
        200: {
          content: {
            "application/json": components["schemas"]["MediaRequest"];
          };
        };
      };
    };
  };
  "/request/{requestId}/{status}": {
    /**
     * Update a request's status
     * @description Updates a request's status to approved or declined. Also returns the request in a JSON object.
     *
     * Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
     */
    post: {
      parameters: {
        path: {
          /** @description Request ID */
          requestId: string;
          /** @description New status */
          status: "approve" | "decline";
        };
      };
      responses: {
        /** @description Request status changed */
        200: {
          content: {
            "application/json": components["schemas"]["MediaRequest"];
          };
        };
      };
    };
  };
  "/movie/{movieId}": {
    /**
     * Get movie details
     * @description Returns full movie details in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        path: {
          movieId: number;
        };
      };
      responses: {
        /** @description Movie details */
        200: {
          content: {
            "application/json": components["schemas"]["MovieDetails"];
          };
        };
      };
    };
  };
  "/movie/{movieId}/recommendations": {
    /**
     * Get recommended movies
     * @description Returns list of recommended movies based on provided movie ID in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          movieId: number;
        };
      };
      responses: {
        /** @description List of movies */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/movie/{movieId}/similar": {
    /**
     * Get similar movies
     * @description Returns list of similar movies based on the provided movieId in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          movieId: number;
        };
      };
      responses: {
        /** @description List of movies */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["MovieResult"][];
            };
          };
        };
      };
    };
  };
  "/movie/{movieId}/ratings": {
    /**
     * Get movie ratings
     * @description Returns ratings based on the provided movieId in a JSON object.
     */
    get: {
      parameters: {
        path: {
          movieId: number;
        };
      };
      responses: {
        /** @description Ratings returned */
        200: {
          content: {
            "application/json": {
              /** @example Mulan */
              title?: string;
              /** @example 2020 */
              year?: number;
              /** @example http://www.rottentomatoes.com/m/mulan_2020/ */
              url?: string;
              /** @example 85 */
              criticsScore?: number;
              /** @enum {string} */
              criticsRating?: "Rotten" | "Fresh" | "Certified Fresh";
              /** @example 65 */
              audienceScore?: number;
              /** @enum {string} */
              audienceRating?: "Spilled" | "Upright";
            };
          };
        };
      };
    };
  };
  "/movie/{movieId}/ratingscombined": {
    /**
     * Get RT and IMDB movie ratings combined
     * @description Returns ratings from RottenTomatoes and IMDB based on the provided movieId in a JSON object.
     */
    get: {
      parameters: {
        path: {
          movieId: number;
        };
      };
      responses: {
        /** @description Ratings returned */
        200: {
          content: {
            "application/json": {
              rt?: {
                /** @example Mulan */
                title?: string;
                /** @example 2020 */
                year?: number;
                /** @example http://www.rottentomatoes.com/m/mulan_2020/ */
                url?: string;
                /** @example 85 */
                criticsScore?: number;
                /** @enum {string} */
                criticsRating?: "Rotten" | "Fresh" | "Certified Fresh";
                /** @example 65 */
                audienceScore?: number;
                /** @enum {string} */
                audienceRating?: "Spilled" | "Upright";
              };
              imdb?: {
                /** @example I am Legend */
                title?: string;
                /** @example https://www.imdb.com/title/tt0480249 */
                url?: string;
                /** @example 6.5 */
                criticsScore?: number;
              };
            };
          };
        };
      };
    };
  };
  "/tv/{tvId}": {
    /**
     * Get TV details
     * @description Returns full TV details in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        path: {
          tvId: number;
        };
      };
      responses: {
        /** @description TV details */
        200: {
          content: {
            "application/json": components["schemas"]["TvDetails"];
          };
        };
      };
    };
  };
  "/tv/{tvId}/season/{seasonId}": {
    /**
     * Get season details and episode list
     * @description Returns season details with a list of episodes in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        path: {
          tvId: number;
          seasonId: number;
        };
      };
      responses: {
        /** @description TV details */
        200: {
          content: {
            "application/json": components["schemas"]["Season"];
          };
        };
      };
    };
  };
  "/tv/{tvId}/recommendations": {
    /**
     * Get recommended TV series
     * @description Returns list of recommended TV series based on the provided tvId in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          tvId: number;
        };
      };
      responses: {
        /** @description List of TV series */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/tv/{tvId}/similar": {
    /**
     * Get similar TV series
     * @description Returns list of similar TV series based on the provided tvId in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          language?: string;
        };
        path: {
          tvId: number;
        };
      };
      responses: {
        /** @description List of TV series */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              page?: number;
              /** @example 20 */
              totalPages?: number;
              /** @example 200 */
              totalResults?: number;
              results?: components["schemas"]["TvResult"][];
            };
          };
        };
      };
    };
  };
  "/tv/{tvId}/ratings": {
    /**
     * Get TV ratings
     * @description Returns ratings based on provided tvId in a JSON object.
     */
    get: {
      parameters: {
        path: {
          tvId: number;
        };
      };
      responses: {
        /** @description Ratings returned */
        200: {
          content: {
            "application/json": {
              /** @example The Boys */
              title?: string;
              /** @example 2019 */
              year?: number;
              /** @example http://www.rottentomatoes.com/m/mulan_2020/ */
              url?: string;
              /** @example 85 */
              criticsScore?: number;
              /** @enum {string} */
              criticsRating?: "Rotten" | "Fresh";
            };
          };
        };
      };
    };
  };
  "/person/{personId}": {
    /**
     * Get person details
     * @description Returns person details based on provided personId in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        path: {
          personId: number;
        };
      };
      responses: {
        /** @description Returned person */
        200: {
          content: {
            "application/json": components["schemas"]["PersonDetails"];
          };
        };
      };
    };
  };
  "/person/{personId}/combined_credits": {
    /**
     * Get combined credits
     * @description Returns the person's combined credits based on the provided personId in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        path: {
          personId: number;
        };
      };
      responses: {
        /** @description Returned combined credits */
        200: {
          content: {
            "application/json": {
              cast?: components["schemas"]["CreditCast"][];
              crew?: components["schemas"]["CreditCrew"][];
              id?: number;
            };
          };
        };
      };
    };
  };
  "/media": {
    /**
     * Get media
     * @description Returns all media (can be filtered and limited) in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          take?: number | null;
          skip?: number | null;
          filter?: "all" | "available" | "partial" | "allavailable" | "processing" | "pending" | null;
          sort?: "added" | "modified" | "mediaAdded";
        };
      };
      responses: {
        /** @description Returned media */
        200: {
          content: {
            "application/json": {
              pageInfo?: components["schemas"]["PageInfo"];
              results?: components["schemas"]["MediaInfo"][];
            };
          };
        };
      };
    };
  };
  "/media/{mediaId}": {
    /**
     * Delete media item
     * @description Removes a media item. The `MANAGE_REQUESTS` permission is required to perform this action.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description Media ID
           * @example 1
           */
          mediaId: string;
        };
      };
      responses: {
        /** @description Succesfully removed media item */
        204: {
          content: never;
        };
      };
    };
  };
  "/media/{mediaId}/file": {
    /**
     * Delete media file
     * @description Removes a media file from radarr/sonarr. The `ADMIN` permission is required to perform this action.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description Media ID
           * @example 1
           */
          mediaId: string;
        };
      };
      responses: {
        /** @description Succesfully removed media item */
        204: {
          content: never;
        };
      };
    };
  };
  "/media/{mediaId}/{status}": {
    /**
     * Update media status
     * @description Updates a media item's status and returns the media in JSON format
     */
    post: {
      parameters: {
        path: {
          /**
           * @description Media ID
           * @example 1
           */
          mediaId: string;
          /**
           * @description New status
           * @example available
           */
          status: "available" | "partial" | "processing" | "pending" | "unknown";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @example false */
            is4k?: boolean;
          };
        };
      };
      responses: {
        /** @description Returned media */
        200: {
          content: {
            "application/json": components["schemas"]["MediaInfo"];
          };
        };
      };
    };
  };
  "/media/{mediaId}/watch_data": {
    /**
     * Get watch data
     * @description Returns play count, play duration, and users who have watched the media.
     *
     * Requires the `ADMIN` permission.
     */
    get: {
      parameters: {
        path: {
          /**
           * @description Media ID
           * @example 1
           */
          mediaId: string;
        };
      };
      responses: {
        /** @description Users */
        200: {
          content: {
            "application/json": {
              data?: {
                playCount7Days?: number;
                playCount30Days?: number;
                playCount?: number;
                users?: components["schemas"]["User"][];
              };
              data4k?: {
                playCount7Days?: number;
                playCount30Days?: number;
                playCount?: number;
                users?: components["schemas"]["User"][];
              };
            };
          };
        };
      };
    };
  };
  "/collection/{collectionId}": {
    /**
     * Get collection details
     * @description Returns full collection details in a JSON object.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        path: {
          collectionId: number;
        };
      };
      responses: {
        /** @description Collection details */
        200: {
          content: {
            "application/json": components["schemas"]["Collection"];
          };
        };
      };
    };
  };
  "/service/radarr": {
    /**
     * Get non-sensitive Radarr server list
     * @description Returns a list of Radarr server IDs and names in a JSON object.
     */
    get: {
      responses: {
        /** @description Request successful */
        200: {
          content: {
            "application/json": components["schemas"]["RadarrSettings"][];
          };
        };
      };
    };
  };
  "/service/radarr/{radarrId}": {
    /**
     * Get Radarr server quality profiles and root folders
     * @description Returns a Radarr server's quality profile and root folder details in a JSON object.
     */
    get: {
      parameters: {
        path: {
          radarrId: number;
        };
      };
      responses: {
        /** @description Request successful */
        200: {
          content: {
            "application/json": {
              server?: components["schemas"]["RadarrSettings"];
              profiles?: components["schemas"]["ServiceProfile"];
            };
          };
        };
      };
    };
  };
  "/service/sonarr": {
    /**
     * Get non-sensitive Sonarr server list
     * @description Returns a list of Sonarr server IDs and names in a JSON object.
     */
    get: {
      responses: {
        /** @description Request successful */
        200: {
          content: {
            "application/json": components["schemas"]["SonarrSettings"][];
          };
        };
      };
    };
  };
  "/service/sonarr/{sonarrId}": {
    /**
     * Get Sonarr server quality profiles and root folders
     * @description Returns a Sonarr server's quality profile and root folder details in a JSON object.
     */
    get: {
      parameters: {
        path: {
          sonarrId: number;
        };
      };
      responses: {
        /** @description Request successful */
        200: {
          content: {
            "application/json": {
              server?: components["schemas"]["SonarrSettings"];
              profiles?: components["schemas"]["ServiceProfile"];
            };
          };
        };
      };
    };
  };
  "/service/sonarr/lookup/{tmdbId}": {
    /**
     * Get series from Sonarr
     * @description Returns a list of series returned by searching for the name in Sonarr.
     */
    get: {
      parameters: {
        path: {
          tmdbId: number;
        };
      };
      responses: {
        /** @description Request successful */
        200: {
          content: {
            "application/json": components["schemas"]["SonarrSeries"][];
          };
        };
      };
    };
  };
  "/regions": {
    /**
     * Regions supported by TMDB
     * @description Returns a list of regions in a JSON object.
     */
    get: {
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
                /** @example US */
                iso_3166_1?: string;
                /** @example United States of America */
                english_name?: string;
              }[];
          };
        };
      };
    };
  };
  "/languages": {
    /**
     * Languages supported by TMDB
     * @description Returns a list of languages in a JSON object.
     */
    get: {
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
                /** @example en */
                iso_639_1?: string;
                /** @example English */
                english_name?: string;
                /** @example English */
                name?: string;
              }[];
          };
        };
      };
    };
  };
  "/studio/{studioId}": {
    /**
     * Get movie studio details
     * @description Returns movie studio details in a JSON object.
     */
    get: {
      parameters: {
        path: {
          studioId: number;
        };
      };
      responses: {
        /** @description Movie studio details */
        200: {
          content: {
            "application/json": components["schemas"]["ProductionCompany"];
          };
        };
      };
    };
  };
  "/network/{networkId}": {
    /**
     * Get TV network details
     * @description Returns TV network details in a JSON object.
     */
    get: {
      parameters: {
        path: {
          networkId: number;
        };
      };
      responses: {
        /** @description TV network details */
        200: {
          content: {
            "application/json": components["schemas"]["ProductionCompany"];
          };
        };
      };
    };
  };
  "/genres/movie": {
    /**
     * Get list of official TMDB movie genres
     * @description Returns a list of genres in a JSON array.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
                /** @example 10751 */
                id?: number;
                /** @example Family */
                name?: string;
              }[];
          };
        };
      };
    };
  };
  "/genres/tv": {
    /**
     * Get list of official TMDB movie genres
     * @description Returns a list of genres in a JSON array.
     */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
                /** @example 18 */
                id?: number;
                /** @example Drama */
                name?: string;
              }[];
          };
        };
      };
    };
  };
  "/backdrops": {
    /**
     * Get backdrops of trending items
     * @description Returns a list of backdrop image paths in a JSON array.
     */
    get: {
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": string[];
          };
        };
      };
    };
  };
  "/issue": {
    /**
     * Get all issues
     * @description Returns a list of issues in JSON format.
     */
    get: {
      parameters: {
        query?: {
          take?: number | null;
          skip?: number | null;
          sort?: "added" | "modified";
          filter?: "all" | "open" | "resolved";
          requestedBy?: number | null;
        };
      };
      responses: {
        /** @description Issues returned */
        200: {
          content: {
            "application/json": {
              pageInfo?: components["schemas"]["PageInfo"];
              results?: components["schemas"]["Issue"][];
            };
          };
        };
      };
    };
    /**
     * Create new issue
     * @description Creates a new issue
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            issueType?: number;
            message?: string;
            mediaId?: number;
          };
        };
      };
      responses: {
        /** @description Succesfully created the issue */
        201: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
  };
  "/issue/count": {
    /**
     * Gets issue counts
     * @description Returns the number of open and closed issues, as well as the number of issues of each type.
     */
    get: {
      responses: {
        /** @description Issue counts returned */
        200: {
          content: {
            "application/json": {
              total?: number;
              video?: number;
              audio?: number;
              subtitles?: number;
              others?: number;
              open?: number;
              closed?: number;
            };
          };
        };
      };
    };
  };
  "/issue/{issueId}": {
    /**
     * Get issue
     * @description Returns a single issue in JSON format.
     */
    get: {
      parameters: {
        path: {
          issueId: number;
        };
      };
      responses: {
        /** @description Issues returned */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
    /**
     * Delete issue
     * @description Removes an issue. If the user has the `MANAGE_ISSUES` permission, any issue can be removed. Otherwise, only a users own issues can be removed.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description Issue ID
           * @example 1
           */
          issueId: string;
        };
      };
      responses: {
        /** @description Succesfully removed issue */
        204: {
          content: never;
        };
      };
    };
  };
  "/issue/{issueId}/comment": {
    /**
     * Create a comment
     * @description Creates a comment and returns associated issue in JSON format.
     */
    post: {
      parameters: {
        path: {
          issueId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      responses: {
        /** @description Issue returned with new comment */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
  };
  "/issueComment/{commentId}": {
    /**
     * Get issue comment
     * @description Returns a single issue comment in JSON format.
     */
    get: {
      parameters: {
        path: {
          commentId: string;
        };
      };
      responses: {
        /** @description Comment returned */
        200: {
          content: {
            "application/json": components["schemas"]["IssueComment"];
          };
        };
      };
    };
    /**
     * Update issue comment
     * @description Updates and returns a single issue comment in JSON format.
     */
    put: {
      parameters: {
        path: {
          commentId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      responses: {
        /** @description Comment updated */
        200: {
          content: {
            "application/json": components["schemas"]["IssueComment"];
          };
        };
      };
    };
    /**
     * Delete issue comment
     * @description Deletes an issue comment. Only users with `MANAGE_ISSUES` or the user who created the comment can perform this action.
     */
    delete: {
      parameters: {
        path: {
          /**
           * @description Issue Comment ID
           * @example 1
           */
          commentId: string;
        };
      };
      responses: {
        /** @description Succesfully removed issue comment */
        204: {
          content: never;
        };
      };
    };
  };
  "/issue/{issueId}/{status}": {
    /**
     * Update an issue's status
     * @description Updates an issue's status to approved or declined. Also returns the issue in a JSON object.
     *
     * Requires the `MANAGE_ISSUES` permission or `ADMIN`.
     */
    post: {
      parameters: {
        path: {
          /** @description Issue ID */
          issueId: string;
          /** @description New status */
          status: "open" | "resolved";
        };
      };
      responses: {
        /** @description Issue status changed */
        200: {
          content: {
            "application/json": components["schemas"]["Issue"];
          };
        };
      };
    };
  };
  "/keyword/{keywordId}": {
    /**
     * Get keyword
     * @description Returns a single keyword in JSON format.
     */
    get: {
      parameters: {
        path: {
          keywordId: number;
        };
      };
      responses: {
        /** @description Keyword returned */
        200: {
          content: {
            "application/json": components["schemas"]["Keyword"];
          };
        };
      };
    };
  };
  "/watchproviders/regions": {
    /**
     * Get watch provider regions
     * @description Returns a list of all available watch provider regions.
     */
    get: {
      responses: {
        /** @description Watch provider regions returned */
        200: {
          content: {
            "application/json": components["schemas"]["WatchProviderRegion"][];
          };
        };
      };
    };
  };
  "/watchproviders/movies": {
    /**
     * Get watch provider movies
     * @description Returns a list of all available watch providers for movies.
     */
    get: {
      parameters: {
        query: {
          watchRegion: string;
        };
      };
      responses: {
        /** @description Watch providers for movies returned */
        200: {
          content: {
            "application/json": components["schemas"]["WatchProviderDetails"][];
          };
        };
      };
    };
  };
  "/watchproviders/tv": {
    /**
     * Get watch provider series
     * @description Returns a list of all available watch providers for series.
     */
    get: {
      parameters: {
        query: {
          watchRegion: string;
        };
      };
      responses: {
        /** @description Watch providers for series returned */
        200: {
          content: {
            "application/json": components["schemas"]["WatchProviderDetails"][];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Watchlist: {
      /** @example 1 */
      id?: number;
      /** @example 1 */
      tmdbId?: number;
      ratingKey?: string;
      type?: string;
      title?: string;
      media?: components["schemas"]["MediaInfo"];
      /** @example 2020-09-12T10:00:27.000Z */
      createdAt?: string;
      /** @example 2020-09-12T10:00:27.000Z */
      updatedAt?: string;
      requestedBy?: components["schemas"]["User"];
    };
    User: {
      /** @example 1 */
      id: number;
      /** @example hey@itsme.com */
      email: string;
      username?: string;
      plexUsername?: string;
      plexToken?: string;
      jellyfinAuthToken?: string;
      /** @example 1 */
      userType?: number;
      /** @example 0 */
      permissions?: number;
      avatar?: string;
      /** @example 2020-09-02T05:02:23.000Z */
      createdAt: string;
      /** @example 2020-09-02T05:02:23.000Z */
      updatedAt: string;
      /** @example 5 */
      requestCount?: number;
    };
    UserSettings: {
      locale?: string;
      region?: string;
      originalLanguage?: string;
    };
    MainSettings: {
      apiKey?: string;
      /** @example en */
      appLanguage?: string;
      /** @example Overseerr */
      applicationTitle?: string;
      /** @example https://os.example.com */
      applicationUrl?: string;
      /** @example true */
      trustProxy?: boolean;
      /** @example false */
      csrfProtection?: boolean;
      /** @example false */
      hideAvailable?: boolean;
      /** @example false */
      partialRequestsEnabled?: boolean;
      /** @example true */
      localLogin?: boolean;
      /** @example 1 */
      mediaServerType?: number;
      /** @example true */
      newPlexLogin?: boolean;
      /** @example 32 */
      defaultPermissions?: number;
    };
    PlexLibrary: {
      id: string;
      /** @example Movies */
      name: string;
      /** @example false */
      enabled: boolean;
    };
    PlexSettings: {
      /** @example Main Server */
      name: string;
      /** @example 1234123412341234 */
      machineId: string;
      /** @example 127.0.0.1 */
      ip: string;
      /** @example 32400 */
      port: number;
      useSsl?: boolean | null;
      libraries?: readonly components["schemas"]["PlexLibrary"][];
      /** @example https://app.plex.tv/desktop */
      webAppUrl?: string | null;
    };
    PlexConnection: {
      /** @example https */
      protocol: string;
      /** @example 127.0.0.1 */
      address: string;
      /** @example 32400 */
      port: number;
      /** @example https://127-0-0-1.2ab6ce1a093d465e910def96cf4e4799.plex.direct:32400 */
      uri: string;
      /** @example true */
      local: boolean;
      /** @example 200 */
      status?: number;
      /** @example OK */
      message?: string;
    };
    PlexDevice: {
      /** @example My Plex Server */
      name: string;
      /** @example Plex Media Server */
      product: string;
      /** @example 1.21 */
      productVersion: string;
      /** @example Linux */
      platform: string;
      /** @example default/linux/amd64/17.1/systemd */
      platformVersion?: string;
      /** @example PC */
      device: string;
      /** @example 85a943ce-a0cc-4d2a-a4ec-f74f06e40feb */
      clientIdentifier: string;
      /** @example 2021-01-01T00:00:00.000Z */
      createdAt: string;
      /** @example 2021-01-01T00:00:00.000Z */
      lastSeenAt: string;
      provides: string[];
      /** @example true */
      owned: boolean;
      /** @example 12345 */
      ownerID?: string;
      /** @example true */
      home?: boolean;
      /** @example xyzabc */
      sourceTitle?: string;
      /** @example supersecretaccesstoken */
      accessToken?: string;
      /** @example 127.0.0.1 */
      publicAddress?: string;
      /** @example true */
      httpsRequired?: boolean;
      /** @example true */
      synced?: boolean;
      /** @example true */
      relay?: boolean;
      /** @example false */
      dnsRebindingProtection?: boolean;
      /** @example false */
      natLoopbackSupported?: boolean;
      /** @example false */
      publicAddressMatches?: boolean;
      /** @example true */
      presence?: boolean;
      connection: components["schemas"]["PlexConnection"][];
    };
    JellyfinLibrary: {
      id: string;
      /** @example Movies */
      name: string;
      /** @example false */
      enabled: boolean;
    };
    JellyfinSettings: {
      /** @example Main Server */
      name?: string;
      /** @example http://my.jellyfin.host */
      hostname?: string;
      /** @example http://my.jellyfin.host */
      externalHostname?: string;
      /** @example http://my.jellyfin.host/web/index.html#!/forgotpassword.html */
      jellyfinForgotPasswordUrl?: string;
      /** @example admin */
      adminUser?: string;
      /** @example mypassword */
      adminPass?: string;
      libraries?: readonly components["schemas"]["JellyfinLibrary"][];
      serverID?: string;
    };
    TautulliSettings: {
      /** @example tautulli.example.com */
      hostname?: string | null;
      /** @example 8181 */
      port?: number | null;
      useSsl?: boolean | null;
      apiKey?: string | null;
      externalUrl?: string | null;
    };
    RadarrSettings: {
      /** @example 0 */
      id?: number;
      /** @example Radarr Main */
      name: string;
      /** @example 127.0.0.1 */
      hostname: string;
      /** @example 7878 */
      port: number;
      /** @example exampleapikey */
      apiKey: string;
      /** @example false */
      useSsl: boolean;
      baseUrl?: string;
      /** @example 1 */
      activeProfileId: number;
      /** @example 720p/1080p */
      activeProfileName: string;
      /** @example /movies */
      activeDirectory: string;
      /** @example false */
      is4k: boolean;
      /** @example In Cinema */
      minimumAvailability: string;
      /** @example false */
      isDefault: boolean;
      /** @example http://radarr.example.com */
      externalUrl?: string;
      /** @example false */
      syncEnabled?: boolean;
      /** @example false */
      preventSearch?: boolean;
    };
    SonarrSettings: {
      /** @example 0 */
      id?: number;
      /** @example Sonarr Main */
      name: string;
      /** @example 127.0.0.1 */
      hostname: string;
      /** @example 8989 */
      port: number;
      /** @example exampleapikey */
      apiKey: string;
      /** @example false */
      useSsl: boolean;
      baseUrl?: string;
      /** @example 1 */
      activeProfileId: number;
      /** @example 720p/1080p */
      activeProfileName: string;
      /** @example /tv/ */
      activeDirectory: string;
      /** @example 1 */
      activeLanguageProfileId?: number;
      activeAnimeProfileId?: number | null;
      activeAnimeLanguageProfileId?: number | null;
      /** @example 720p/1080p */
      activeAnimeProfileName?: string | null;
      activeAnimeDirectory?: string | null;
      /** @example false */
      is4k: boolean;
      /** @example false */
      enableSeasonFolders: boolean;
      /** @example false */
      isDefault: boolean;
      /** @example http://radarr.example.com */
      externalUrl?: string;
      /** @example false */
      syncEnabled?: boolean;
      /** @example false */
      preventSearch?: boolean;
    };
    ServarrTag: {
      /** @example 1 */
      id?: number;
      /** @example A Label */
      label?: string;
    };
    PublicSettings: {
      /** @example false */
      initialized?: boolean;
    };
    MovieResult: {
      /** @example 1234 */
      id: number;
      mediaType: string;
      /** @example 10 */
      popularity?: number;
      posterPath?: string;
      backdropPath?: string;
      voteCount?: number;
      voteAverage?: number;
      genreIds?: number[];
      /** @example Overview of the movie */
      overview?: string;
      /** @example en */
      originalLanguage?: string;
      /** @example Movie Title */
      title: string;
      /** @example Original Movie Title */
      originalTitle?: string;
      releaseDate?: string;
      /** @example false */
      adult?: boolean;
      /** @example false */
      video?: boolean;
      mediaInfo?: components["schemas"]["MediaInfo"];
    };
    TvResult: {
      /** @example 1234 */
      id?: number;
      mediaType?: string;
      /** @example 10 */
      popularity?: number;
      posterPath?: string;
      backdropPath?: string;
      voteCount?: number;
      voteAverage?: number;
      genreIds?: number[];
      /** @example Overview of the movie */
      overview?: string;
      /** @example en */
      originalLanguage?: string;
      /** @example TV Show Name */
      name?: string;
      /** @example Original TV Show Name */
      originalName?: string;
      originCountry?: string[];
      firstAirDate?: string;
      mediaInfo?: components["schemas"]["MediaInfo"];
    };
    PersonResult: {
      /** @example 12345 */
      id?: number;
      profilePath?: string;
      /** @example false */
      adult?: boolean;
      /** @default person */
      mediaType?: string;
      knownFor?: (components["schemas"]["MovieResult"] | components["schemas"]["TvResult"])[];
    };
    Genre: {
      /** @example 1 */
      id?: number;
      /** @example Adventure */
      name?: string;
    };
    Company: {
      /** @example 1 */
      id?: number;
      logo_path?: string | null;
      name?: string;
    };
    ProductionCompany: {
      /** @example 1 */
      id?: number;
      logoPath?: string | null;
      originCountry?: string;
      name?: string;
    };
    Network: {
      /** @example 1 */
      id?: number;
      logoPath?: string | null;
      originCountry?: string;
      name?: string;
    };
    RelatedVideo: {
      /** @example https://www.youtube.com/watch?v=9qhL2_UxXM0/ */
      url?: string;
      /** @example 9qhL2_UxXM0 */
      key?: string;
      /** @example Trailer for some movie (1978) */
      name?: string;
      /** @example 1080 */
      size?: number;
      /**
       * @example Trailer
       * @enum {string}
       */
      type?: "Clip" | "Teaser" | "Trailer" | "Featurette" | "Opening Credits" | "Behind the Scenes" | "Bloopers";
      /** @enum {string} */
      site?: "YouTube";
    };
    MovieDetails: {
      /** @example 123 */
      id?: number;
      /** @example tt123 */
      imdbId?: string;
      adult?: boolean;
      backdropPath?: string;
      posterPath?: string;
      /** @example 1000000 */
      budget?: number;
      genres?: components["schemas"]["Genre"][];
      homepage?: string;
      relatedVideos?: components["schemas"]["RelatedVideo"][];
      originalLanguage?: string;
      originalTitle?: string;
      overview?: string;
      popularity?: number;
      productionCompanies?: components["schemas"]["ProductionCompany"][];
      productionCountries?: {
          iso_3166_1?: string;
          name?: string;
        }[];
      releaseDate?: string;
      releases?: {
        results?: ({
            /** @example US */
            iso_3166_1?: string;
            rating?: string | null;
            release_dates?: ({
                /** @example PG-13 */
                certification?: string;
                iso_639_1?: string | null;
                /** @example Blu ray */
                note?: string | null;
                /** @example 2017-07-12T00:00:00.000Z */
                release_date?: string;
                /** @example 1 */
                type?: number;
              })[];
          })[];
      };
      revenue?: number | null;
      runtime?: number;
      spokenLanguages?: components["schemas"]["SpokenLanguage"][];
      status?: string;
      tagline?: string;
      title?: string;
      video?: boolean;
      voteAverage?: number;
      voteCount?: number;
      credits?: {
        cast?: components["schemas"]["Cast"][];
        crew?: components["schemas"]["Crew"][];
      };
      collection?: {
        /** @example 1 */
        id?: number;
        /** @example A collection */
        name?: string;
        posterPath?: string;
        backdropPath?: string;
      };
      externalIds?: components["schemas"]["ExternalIds"];
      mediaInfo?: components["schemas"]["MediaInfo"];
      watchProviders?: components["schemas"]["WatchProviders"][];
    };
    Episode: {
      id?: number;
      name?: string;
      airDate?: string | null;
      episodeNumber?: number;
      overview?: string;
      productionCode?: string;
      seasonNumber?: number;
      showId?: number;
      stillPath?: string | null;
      voteAverage?: number;
      voteCount?: number;
    };
    Season: {
      id?: number;
      airDate?: string | null;
      episodeCount?: number;
      name?: string;
      overview?: string;
      posterPath?: string;
      seasonNumber?: number;
      episodes?: components["schemas"]["Episode"][];
    };
    TvDetails: {
      /** @example 123 */
      id?: number;
      backdropPath?: string;
      posterPath?: string;
      contentRatings?: {
        results?: {
            /** @example US */
            iso_3166_1?: string;
            /** @example TV-14 */
            rating?: string;
          }[];
      };
      createdBy?: ({
          id?: number;
          name?: string;
          gender?: number;
          profilePath?: string | null;
        })[];
      episodeRunTime?: number[];
      firstAirDate?: string;
      genres?: components["schemas"]["Genre"][];
      homepage?: string;
      inProduction?: boolean;
      languages?: string[];
      lastAirDate?: string;
      lastEpisodeToAir?: components["schemas"]["Episode"];
      name?: string;
      nextEpisodeToAir?: components["schemas"]["Episode"];
      networks?: components["schemas"]["ProductionCompany"][];
      numberOfEpisodes?: number;
      numberOfSeason?: number;
      originCountry?: string[];
      originalLanguage?: string;
      originalName?: string;
      overview?: string;
      popularity?: number;
      productionCompanies?: components["schemas"]["ProductionCompany"][];
      productionCountries?: {
          iso_3166_1?: string;
          name?: string;
        }[];
      spokenLanguages?: components["schemas"]["SpokenLanguage"][];
      seasons?: components["schemas"]["Season"][];
      status?: string;
      tagline?: string;
      type?: string;
      voteAverage?: number;
      voteCount?: number;
      credits?: {
        cast?: components["schemas"]["Cast"][];
        crew?: components["schemas"]["Crew"][];
      };
      externalIds?: components["schemas"]["ExternalIds"];
      keywords?: components["schemas"]["Keyword"][];
      mediaInfo?: components["schemas"]["MediaInfo"];
      watchProviders?: components["schemas"]["WatchProviders"][];
    };
    MediaRequest: {
      /** @example 123 */
      id: number;
      /**
       * @description Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED, 3 = DECLINED
       * @example 0
       */
      status: number;
      media?: components["schemas"]["MediaInfo"];
      /** @example 2020-09-12T10:00:27.000Z */
      createdAt?: string;
      /** @example 2020-09-12T10:00:27.000Z */
      updatedAt?: string;
      requestedBy?: components["schemas"]["User"];
      modifiedBy?: components["schemas"]["User"] | (string | null);
      /** @example false */
      is4k?: boolean;
      serverId?: number;
      profileId?: number;
      rootFolder?: string;
    };
    MediaInfo: {
      id?: number;
      tmdbId?: number;
      tvdbId?: number | null;
      /**
       * @description Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`
       * @example 0
       */
      status?: number;
      requests?: readonly components["schemas"]["MediaRequest"][];
      /** @example 2020-09-12T10:00:27.000Z */
      createdAt?: string;
      /** @example 2020-09-12T10:00:27.000Z */
      updatedAt?: string;
    };
    Cast: {
      /** @example 123 */
      id?: number;
      /** @example 1 */
      castId?: number;
      /** @example Some Character Name */
      character?: string;
      creditId?: string;
      gender?: number;
      /** @example Some Persons Name */
      name?: string;
      order?: number;
      profilePath?: string | null;
    };
    Crew: {
      /** @example 123 */
      id?: number;
      creditId?: string;
      gender?: number;
      /** @example Some Persons Name */
      name?: string;
      job?: string;
      department?: string;
      profilePath?: string | null;
    };
    ExternalIds: {
      facebookId?: string | null;
      freebaseId?: string | null;
      freebaseMid?: string | null;
      imdbId?: string | null;
      instagramId?: string | null;
      tvdbId?: number | null;
      tvrageId?: number | null;
      twitterId?: string | null;
    };
    ServiceProfile: {
      /** @example 1 */
      id?: number;
      /** @example 720p/1080p */
      name?: string;
    };
    PageInfo: {
      /** @example 1 */
      page?: number;
      /** @example 10 */
      pages?: number;
      /** @example 100 */
      results?: number;
    };
    DiscordSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        botUsername?: string;
        botAvatarUrl?: string;
        webhookUrl?: string;
        enableMentions?: boolean;
      };
    };
    SlackSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        webhookUrl?: string;
      };
    };
    WebPushSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
    };
    WebhookSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        webhookUrl?: string;
        authHeader?: string;
        jsonPayload?: string;
      };
    };
    TelegramSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        botUsername?: string;
        botAPI?: string;
        chatId?: string;
        sendSilently?: boolean;
      };
    };
    PushbulletSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        accessToken?: string;
        channelTag?: string | null;
      };
    };
    PushoverSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        accessToken?: string;
        userToken?: string;
        sound?: string;
      };
    };
    GotifySettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        url?: string;
        token?: string;
      };
    };
    LunaSeaSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        webhookUrl?: string;
        profileName?: string;
      };
    };
    NotificationEmailSettings: {
      /** @example false */
      enabled?: boolean;
      /** @example 2 */
      types?: number;
      options?: {
        /** @example no-reply@example.com */
        emailFrom?: string;
        /** @example Overseerr */
        senderName?: string;
        /** @example 127.0.0.1 */
        smtpHost?: string;
        /** @example 465 */
        smtpPort?: number;
        /** @example false */
        secure?: boolean;
        /** @example false */
        ignoreTls?: boolean;
        /** @example false */
        requireTls?: boolean;
        authUser?: string | null;
        authPass?: string | null;
        /** @example false */
        allowSelfSigned?: boolean;
      };
    };
    Job: {
      /** @example job-name */
      id?: string;
      /** @enum {string} */
      type?: "process" | "command";
      /** @enum {string} */
      interval?: "short" | "long" | "fixed";
      /** @example A Job Name */
      name?: string;
      /** @example 2020-09-02T05:02:23.000Z */
      nextExecutionTime?: string;
      /** @example false */
      running?: boolean;
    };
    PersonDetails: {
      /** @example 1 */
      id?: number;
      name?: string;
      deathday?: string;
      knownForDepartment?: string;
      alsoKnownAs?: string[];
      gender?: string;
      biography?: string;
      popularity?: string;
      placeOfBirth?: string;
      profilePath?: string;
      adult?: boolean;
      imdbId?: string;
      homepage?: string;
    };
    CreditCast: {
      /** @example 1 */
      id?: number;
      originalLanguage?: string;
      episodeCount?: number;
      overview?: string;
      originCountry?: string[];
      originalName?: string;
      voteCount?: number;
      name?: string;
      mediaType?: string;
      popularity?: number;
      creditId?: string;
      backdropPath?: string;
      firstAirDate?: string;
      voteAverage?: number;
      genreIds?: number[];
      posterPath?: string;
      originalTitle?: string;
      video?: boolean;
      title?: string;
      adult?: boolean;
      releaseDate?: string;
      character?: string;
      mediaInfo?: components["schemas"]["MediaInfo"];
    };
    CreditCrew: {
      /** @example 1 */
      id?: number;
      originalLanguage?: string;
      episodeCount?: number;
      overview?: string;
      originCountry?: string[];
      originalName?: string;
      voteCount?: number;
      name?: string;
      mediaType?: string;
      popularity?: number;
      creditId?: string;
      backdropPath?: string;
      firstAirDate?: string;
      voteAverage?: number;
      genreIds?: number[];
      posterPath?: string;
      originalTitle?: string;
      video?: boolean;
      title?: string;
      adult?: boolean;
      releaseDate?: string;
      department?: string;
      job?: string;
      mediaInfo?: components["schemas"]["MediaInfo"];
    };
    Keyword: {
      /** @example 1 */
      id?: number;
      /** @example anime */
      name?: string;
    };
    SpokenLanguage: {
      /** @example English */
      englishName?: string | null;
      /** @example en */
      iso_639_1?: string;
      /** @example English */
      name?: string;
    };
    Collection: {
      /** @example 123 */
      id?: number;
      /** @example A Movie Collection */
      name?: string;
      /** @example Overview of collection */
      overview?: string;
      posterPath?: string;
      backdropPath?: string;
      parts?: components["schemas"]["MovieResult"][];
    };
    SonarrSeries: {
      /** @example COVID-25 */
      title?: string;
      /** @example covid 25 */
      sortTitle?: string;
      /** @example 1 */
      seasonCount?: number;
      /** @example upcoming */
      status?: string;
      /** @example The thread is picked up again by Marianne Schmidt which ... */
      overview?: string;
      /** @example CBS */
      network?: string;
      /** @example 02:15 */
      airTime?: string;
      images?: {
          /** @example banner */
          coverType?: string;
          /** @example /sonarr/MediaCoverProxy/6467f05d9872726ad08cbf920e5fee4bf69198682260acab8eab5d3c2c958e92/5c8f116c6aa5c.jpg */
          url?: string;
        }[];
      /** @example https://artworks.thetvdb.com/banners/posters/5c8f116129983.jpg */
      remotePoster?: string;
      seasons?: {
          /** @example 1 */
          seasonNumber?: number;
          /** @example true */
          monitored?: boolean;
        }[];
      /** @example 2015 */
      year?: number;
      path?: string;
      profileId?: number;
      languageProfileId?: number;
      seasonFolder?: boolean;
      monitored?: boolean;
      useSceneNumbering?: boolean;
      runtime?: number;
      /** @example 12345 */
      tvdbId?: number;
      tvRageId?: number;
      tvMazeId?: number;
      firstAired?: string;
      lastInfoSync?: string | null;
      seriesType?: string;
      cleanTitle?: string;
      imdbId?: string;
      titleSlug?: string;
      certification?: string;
      genres?: string[];
      tags?: string[];
      added?: string;
      ratings?: {
          votes?: number;
          value?: number;
        }[];
      qualityProfileId?: number;
      id?: number | null;
      rootFolderPath?: string | null;
      addOptions?: ({
          ignoreEpisodesWithFiles?: boolean | null;
          ignoreEpisodesWithoutFiles?: boolean | null;
          searchForMissingEpisodes?: boolean | null;
        })[];
    };
    UserSettingsNotifications: {
      notificationTypes?: components["schemas"]["NotificationAgentTypes"];
      emailEnabled?: boolean;
      pgpKey?: string | null;
      discordEnabled?: boolean;
      discordEnabledTypes?: number | null;
      discordId?: string | null;
      pushbulletAccessToken?: string | null;
      pushoverApplicationToken?: string | null;
      pushoverUserKey?: string | null;
      pushoverSound?: string | null;
      telegramEnabled?: boolean;
      telegramBotUsername?: string | null;
      telegramChatId?: string | null;
      telegramSendSilently?: boolean | null;
    };
    NotificationAgentTypes: {
      discord?: number;
      email?: number;
      pushbullet?: number;
      pushover?: number;
      slack?: number;
      telegram?: number;
      webhook?: number;
      webpush?: number;
    };
    WatchProviders: {
        iso_3166_1?: string;
        link?: string;
        buy?: components["schemas"]["WatchProviderDetails"][];
        flatrate?: unknown;
      }[];
    WatchProviderDetails: {
      displayPriority?: number;
      logoPath?: string;
      id?: number;
      name?: string;
    };
    Issue: {
      /** @example 1 */
      id?: number;
      /** @example 1 */
      issueType?: number;
      media?: components["schemas"]["MediaInfo"];
      createdBy?: components["schemas"]["User"];
      modifiedBy?: components["schemas"]["User"];
      comments?: components["schemas"]["IssueComment"][];
    };
    IssueComment: {
      /** @example 1 */
      id?: number;
      user?: components["schemas"]["User"];
      /** @example A comment */
      message?: string;
    };
    DiscoverSlider: {
      /** @example 1 */
      id?: number;
      /** @example 1 */
      type: number;
      title: string | null;
      isBuiltIn?: boolean;
      enabled: boolean;
      /** @example 1234 */
      data: string | null;
    };
    WatchProviderRegion: {
      iso_3166_1?: string;
      english_name?: string;
      native_name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
